from pathlib import Path
import os
import subprocess
import re

this_dir = Path(__file__).parent

def get_command_from_build_ninja(rule):
    papermario = this_dir / "papermario"
    build_ninja = papermario / "build.ninja"

    with build_ninja.open("r") as f:
        lines = f.readlines()

    command = None
    for i, line in enumerate(lines):
        if line.startswith(f"rule {rule}"):
            command = lines[i + 1]
            command = command[command.find("=")+1:].strip()
            break

    if not command:
        raise Exception(f"Could not find rule '{rule}' in build.ninja")

    if rule == "ld":
        command = command.replace(" ", " -T ../src/symbol_addrs.txt ", 1)

    command = "cd papermario && " + command.replace("$version", "us")

    def run(options):
        my_command = command
        for key, value in options.items():
            my_command = my_command.replace(f"${key}", value)
        if os.system(my_command) != 0:
            exit(1)

    return run

def objdump_get_asm(infname):
    output = subprocess.check_output(["mips-linux-gnu-objdump", infname, "-d"]).decode("utf-8")
    print(output)
    lines = output.splitlines()
    start_of_func_re = re.compile(r"([0-9a-f]+) <(.+)>:")
    funcs_dict = {}

    for i, line in enumerate(lines):
        if match := start_of_func_re.match(line):
            name = match.group(2)

            asm_list = []
            for i, line in enumerate(lines[i+1:]):
                parts = line.split("\t", 2)
                if len(parts) < 2 or parts[1] == "...":
                    break
                as_int = int(parts[1].strip(), 16)
                as_text = parts[2].replace("\t", " ")

                asm_list.append([ as_int, as_text ])

            funcs_dict[name] = asm_list

    return funcs_dict

def objdump_get_symbols(infname):
    output = subprocess.check_output(['mips-linux-gnu-objdump', '-x', infname]).decode()
    objdump_lines = output.splitlines()
    elf_symbols = []

    for line in objdump_lines:
        if " F " in line or " O " in line or " *ABS*" in line:
            components = line.split()
            name = components[-1]

            if "_ROM_START" in name or "_ROM_END" in name:
                continue

            if "/" in name or \
               "." in name or \
               name.startswith("_") or \
               name.startswith("jtbl_") or \
               name.endswith(".o") or \
               re.match(r"L[0-9A-F]{8}", name):
                continue

            addr = int(components[0], 16)
            if " F " in line or name.startswith("func_"):
                type = "func"
            else:
                type = "data"

            if name.startswith("MAMAR_"):
                print(f"{addr:08X} = {name}")

            elf_symbols.append((name, addr, type))

    return elf_symbols

cc = get_command_from_build_ninja("cc")
ld = get_command_from_build_ninja("ld")

cc({ "in": "../src/patches.c", "out": "../build/patches.o" })
ld({ "in": "../src/patches.ld", "out": "../build/patches.elf", "mapfile": "../build/patches.map" })

funcs_dict = objdump_get_asm("build/patches.elf")
symbols = objdump_get_symbols("build/patches.elf")

print(f"Found {len(funcs_dict)} functions")
print(f"Found {len(symbols)} symbols")

with (this_dir / "build" / "patches.mjs").open("w") as f:
    f.write("// Generated by build.py\n")

    for name, asm in funcs_dict.items():
        f.write("\n")
        f.write(f"export const ASM_{name} = new Uint32Array([\n")
        for as_int, as_text in asm:
            f.write(f"    0x{as_int:08x}, // {as_text}\n")
        f.write("])\n")

    f.write("\n")

    for name, addr, type in symbols:
        f.write(f"export const RAM_{name} = 0x{addr:08x}\n")

with (this_dir / "build" / "patches.js").open("w") as f:
    f.write("// Generated by build.py\n")
    f.write("\n")
    f.write("module.exports = {}\n")

    for name, asm in funcs_dict.items():
        f.write("\n")
        f.write(f"module.exports.RAM_{name} = new Uint32Array([\n")
        for as_int, as_text in asm:
            f.write(f"    0x{as_int:08x}, // {as_text}\n")
        f.write("])\n")

    f.write("\n")

    for name, addr, type in symbols:
        f.write(f"module.exports.ASM_{name} = 0x{addr:08x}\n")

with (this_dir / "build" / "patches.d.ts").open("w") as f:
    f.write("// Generated by build.py\n")

    for name, asm in funcs_dict.items():
        f.write("\n")
        f.write(f"export const ASM_{name}: Uint32Array\n")

    f.write("\n")

    for name, addr, type in symbols:
        f.write(f"export const RAM_{name}: number\n")
